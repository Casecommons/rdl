RDL.nowrap :Hash

RDL.type_params :Hash, [:k, :v], :all?, variance: [:+, :+]

RDL.type :Hash, 'self.[]', '(*u) -> Hash<u, u>'  # example: Hash[1,2,3,4]
RDL.type :Hash, 'self.[]', '(Array<[a,b]>) -> Hash<a, b>'
RDL.type :Hash, 'self.[]', '([to_hash: () -> Hash<a, b>]) -> Hash<a, b>'

RDL.type :Hash, :[], '(k) -> v'
RDL.type :Hash, :[]=, '(k, v) -> v'
RDL.type :Hash, :store, '(k,v) -> v'

# RDL.type :Hash, :assoc, '(k) -> [k, v]' # TODO
RDL.type :Hash, :assoc, '(k) -> Array<k or v>'
RDL.type :Hash, :clear, '() -> Hash<k,v>'
RDL.type :Hash, :compare_by_identity, '() -> Hash<k,v>'
RDL.type :Hash, :compare_by_identity?,  '() -> %bool'
RDL.type :Hash, :default, '(?k) -> v'
RDL.type :Hash, :default, '(k) {(k) -> v} -> v'
RDL.type :Hash, :default=, '(v) -> v'

# TODO: check on default_proc
# RDL.type :Hash, :default_proc, '() -> (Hash<k,v>,k) -> v'
# RDL.type :Hash, :default_proc=, '((Hash<k,v>,k) -> v) -> (Hash<k,v>,k) -> v'

RDL.type :Hash, :delete, '(k) -> v'
RDL.type :Hash, :delete, '(k) { (k) -> u } -> u or v'
RDL.type :Hash, :delete_if, '() { (k,v) -> %bool } -> Hash<k,v>'
RDL.type :Hash, :delete_if, '() -> Enumerator<[k, v]>'
RDL.type :Hash, :each, '() { (k,v) -> %any } -> Hash<k,v>'
RDL.type :Hash, :each, '() -> Enumerator<[k, v]>'
RDL.type :Hash, :each_pair, '() { (k,v) -> %any } -> Hash<k,v>'
RDL.type :Hash, :each_pair, '() -> Enumerator<[k, v]>'
RDL.type :Hash, :each_key, '() { (k) -> %any } -> Hash<k,v>'
RDL.type :Hash, :each_key, '() -> Enumerator<[k, v]>'
RDL.type :Hash, :each_value, '() { (v) -> %any } -> Hash<k,v>'
RDL.type :Hash, :each_value, '() -> Enumerator<[k, v]>'
RDL.type :Hash, :empty?, '() -> %bool'
RDL.type :Hash, :fetch, '(k) -> v'
RDL.type :Hash, :fetch, '(k,u) -> u or v'
RDL.type :Hash, :fetch, '(k) { (k) -> u } -> u or v'
RDL.type :Hash, :member?, '(t) -> %bool'
RDL.type :Hash, :has_key?, '(t) -> %bool'
RDL.type :Hash, :key?, '(t) -> %bool'
RDL.type :Hash, :has_value?, '(t) -> %bool'
RDL.type :Hash, :value?, '(t) -> %bool'
RDL.type :Hash, :to_s, '() -> String'
RDL.type :Hash, :inspect, '() -> String'
RDL.type :Hash, :invert, '() -> Hash<v,k>'
RDL.type :Hash, :keep_if, '() { (k,v) -> %bool } -> Hash<k,v>'
RDL.type :Hash, :keep_if, '() -> Enumerator<[k, v]>'
RDL.type :Hash, :key, '(t) -> k'
RDL.type :Hash, :keys, '() -> Array<k>'
RDL.type :Hash, :length, '() -> Integer'
RDL.type :Hash, :size, '() -> Integer'
RDL.type :Hash, :merge, '(Hash<a,b>) -> Hash<a or k, b or v>'
RDL.type :Hash, :merge, '(Hash<a,b>) { (k,v,b) -> v or b } -> Hash<a or k, b or v>'
# RDL.type :Hash, :rassoc, '(k) -> Tuple<k,v>'
RDL.type :Hash, :rassoc, '(k) -> Array<k or v>'
RDL.type :Hash, :rehash, '() -> Hash<k,v>'
RDL.type :Hash, :reject, '() -> Enumerator<[k, v]>'
RDL.type :Hash, :reject, '() {(k,v) -> %bool} -> Hash<k,v>'
RDL.type :Hash, :reject!, '() {(k,v) -> %bool} -> Hash<k,v>'
RDL.type :Hash, :select, '() {(k,v) -> %bool} -> Hash<k,v>'
RDL.type :Hash, :select!, '() {(k,v) -> %bool} -> Hash<k,v>'
# RDL.type :Hash, :shift, '() -> Tuple<k,v>'
RDL.type :Hash, :shift, '() -> Array<k or v>'
# RDL.type :Hash, :to_a, '() -> Array<Tuple<k,v>>'
RDL.type :Hash, :to_a, '() -> Array<Array<k or v>>'
RDL.type :Hash, :to_hash, '() -> Hash<k,v>'
RDL.type :Hash, :values, '() -> Array<v>'
RDL.type :Hash, :values_at, '(*k) -> Array<v>'
